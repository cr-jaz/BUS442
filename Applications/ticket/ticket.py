# Form implementation generated from reading ui file 'ticket.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_ticketPurchase(object):
    def setupUi(self, ticketPurchase):
        ticketPurchase.setObjectName("ticketPurchase")
        ticketPurchase.resize(440, 442)
        font = QtGui.QFont()
        font.setFamily("Sitka Text Semibold")
        font.setPointSize(9)
        ticketPurchase.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=ticketPurchase)
        self.centralwidget.setObjectName("centralwidget")
        self.tbTicketPurchase = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbTicketPurchase.setGeometry(QtCore.QRect(10, 10, 421, 391))
        self.tbTicketPurchase.setObjectName("tbTicketPurchase")
        self.ticketPurchase = QtWidgets.QWidget()
        self.ticketPurchase.setObjectName("ticketPurchase")
        self.lblAge = QtWidgets.QLabel(parent=self.ticketPurchase)
        self.lblAge.setGeometry(QtCore.QRect(20, 70, 101, 16))
        self.lblAge.setObjectName("lblAge")
        self.txtAge = QtWidgets.QLineEdit(parent=self.ticketPurchase)
        self.txtAge.setGeometry(QtCore.QRect(110, 70, 113, 20))
        self.txtAge.setObjectName("txtAge")
        self.lblType = QtWidgets.QLabel(parent=self.ticketPurchase)
        self.lblType.setGeometry(QtCore.QRect(20, 120, 101, 16))
        self.lblType.setObjectName("lblType")
        self.lblName = QtWidgets.QLabel(parent=self.ticketPurchase)
        self.lblName.setGeometry(QtCore.QRect(20, 20, 101, 16))
        self.lblName.setObjectName("lblName")
        self.grpNumber = QtWidgets.QGroupBox(parent=self.ticketPurchase)
        self.grpNumber.setGeometry(QtCore.QRect(20, 170, 371, 51))
        self.grpNumber.setObjectName("grpNumber")
        self.rdOne = QtWidgets.QRadioButton(parent=self.grpNumber)
        self.rdOne.setGeometry(QtCore.QRect(20, 20, 62, 14))
        self.rdOne.setObjectName("rdOne")
        self.rdTwo = QtWidgets.QRadioButton(parent=self.grpNumber)
        self.rdTwo.setGeometry(QtCore.QRect(160, 20, 62, 14))
        self.rdTwo.setObjectName("rdTwo")
        self.rdThree = QtWidgets.QRadioButton(parent=self.grpNumber)
        self.rdThree.setGeometry(QtCore.QRect(290, 20, 62, 14))
        self.rdThree.setObjectName("rdThree")
        self.txtName = QtWidgets.QLineEdit(parent=self.ticketPurchase)
        self.txtName.setGeometry(QtCore.QRect(110, 20, 113, 20))
        self.txtName.setObjectName("txtName")
        self.cmbType = QtWidgets.QComboBox(parent=self.ticketPurchase)
        self.cmbType.setGeometry(QtCore.QRect(140, 120, 121, 22))
        self.cmbType.setObjectName("cmbType")
        self.cmbType.addItem("")
        self.cmbType.addItem("")
        self.cmbType.addItem("")
        self.btnCalc = QtWidgets.QPushButton(parent=self.ticketPurchase)
        self.btnCalc.setGeometry(QtCore.QRect(20, 240, 141, 17))
        self.btnCalc.setObjectName("btnCalc")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.ticketPurchase)
        self.btnPurchase.setGeometry(QtCore.QRect(250, 240, 141, 17))
        self.btnPurchase.setObjectName("btnPurchase")
        self.btnClear = QtWidgets.QPushButton(parent=self.ticketPurchase)
        self.btnClear.setGeometry(QtCore.QRect(20, 330, 141, 17))
        self.btnClear.setObjectName("btnClear")
        self.btnExit = QtWidgets.QPushButton(parent=self.ticketPurchase)
        self.btnExit.setGeometry(QtCore.QRect(250, 330, 141, 17))
        self.btnExit.setObjectName("btnExit")
        self.txtCost = QtWidgets.QLineEdit(parent=self.ticketPurchase)
        self.txtCost.setGeometry(QtCore.QRect(210, 280, 113, 20))
        self.txtCost.setReadOnly(True)
        self.txtCost.setObjectName("txtCost")
        self.lblCost = QtWidgets.QLabel(parent=self.ticketPurchase)
        self.lblCost.setGeometry(QtCore.QRect(120, 280, 101, 16))
        self.lblCost.setObjectName("lblCost")
        self.tbTicketPurchase.addTab(self.ticketPurchase, "")
        self.purchasesMade = QtWidgets.QWidget()
        self.purchasesMade.setObjectName("purchasesMade")
        self.lstPurchases = QtWidgets.QListWidget(parent=self.purchasesMade)
        self.lstPurchases.setGeometry(QtCore.QRect(25, 50, 371, 291))
        self.lstPurchases.setObjectName("lstPurchases")
        self.lblPurchases = QtWidgets.QLabel(parent=self.purchasesMade)
        self.lblPurchases.setGeometry(QtCore.QRect(100, 20, 191, 20))
        self.lblPurchases.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lblPurchases.setObjectName("lblPurchases")
        self.tbTicketPurchase.addTab(self.purchasesMade, "")
        ticketPurchase.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ticketPurchase)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 440, 18))
        self.menubar.setObjectName("menubar")
        ticketPurchase.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ticketPurchase)
        self.statusbar.setObjectName("statusbar")
        ticketPurchase.setStatusBar(self.statusbar)

        self.retranslateUi(ticketPurchase)
        self.tbTicketPurchase.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(ticketPurchase)
        
        # Create an empty dictionary to store ticket type & price
        self.price_data = {}
        self.load_data("ticketprice.txt")
        
        self.btnCalc.clicked.connect(self.calc)
        
        self.btnPurchase.clicked.connect(self.purchase)
        
        self.btnClear.clicked.connect(self.clear_all)
        
        self.tbTicketPurchase.currentChanged.connect(self.display_data)
        
    def load_data(self, filename):
        try:
            with open(filename, "r") as f:
                for line in f:
                    data = line.split(",")
                    self.price_data[data[0]] = int(data[1])
        except FileNotFoundError:
            print("File not present")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections")
    def retranslateUi(self, ticketPurchase):
        _translate = QtCore.QCoreApplication.translate
        ticketPurchase.setWindowTitle(_translate("ticketPurchase", "Ticket Purchase"))
        self.lblAge.setText(_translate("ticketPurchase", "Enter Age:"))
        self.lblType.setText(_translate("ticketPurchase", "Select a Ticket Type:"))
        self.lblName.setText(_translate("ticketPurchase", "Enter Name:"))
        self.grpNumber.setTitle(_translate("ticketPurchase", "Select Number of Tickets:"))
        self.rdOne.setText(_translate("ticketPurchase", "1"))
        self.rdTwo.setText(_translate("ticketPurchase", "2"))
        self.rdThree.setText(_translate("ticketPurchase", "3"))
        self.cmbType.setItemText(0, _translate("ticketPurchase", "Toplevel"))
        self.cmbType.setItemText(1, _translate("ticketPurchase", "Midlevel"))
        self.cmbType.setItemText(2, _translate("ticketPurchase", "Courtside"))
        self.btnCalc.setText(_translate("ticketPurchase", "Calculate Cost"))
        self.btnPurchase.setText(_translate("ticketPurchase", "Purchase Tickets"))
        self.btnClear.setText(_translate("ticketPurchase", "Clear"))
        self.btnExit.setText(_translate("ticketPurchase", "Exit"))
        self.lblCost.setText(_translate("ticketPurchase", "Total Cost:"))
        self.tbTicketPurchase.setTabText(self.tbTicketPurchase.indexOf(self.ticketPurchase), _translate("ticketPurchase", "Ticket Purchase"))
        self.lblPurchases.setText(_translate("ticketPurchase", "List of Previous Purchases:"))
        self.tbTicketPurchase.setTabText(self.tbTicketPurchase.indexOf(self.purchasesMade), _translate("ticketPurchase", "Purchases Made"))
    
    def calc(self):
        try:
            selection = self.cmbType.currentText()
            price_ticket = self.price_data.get(selection)
            
            if(self.rdOne.isChecked()):
                number_tickets = 1
            elif(self.rdTwo.isChecked()):
                number_tickets = 2
            elif(self.rdThree.isChecked()):
                number_tickets = 3
            else:
                # We can create a msg box to force the user to select a radio btn or
                # We can set a default number of 1 ticket
                number_tickets = 1
            
            cost = price_ticket * number_tickets
            self.txtCost.setText(f"${cost:.2f}")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections")
    
    def purchase(self):
        try:
            name = self.txtName.text()
            age = self.txtAge.text()
            selection = self.cmbType.currentText()
            
            if(self.rdOne.isChecked()):
                number_tickets = 1
            elif(self.rdTwo.isChecked()):
                number_tickets = 2
            elif(self.rdThree.isChecked()):
                number_tickets = 3
            else:
                # We can create a msg box to force the user to select a radio btn or
                # We can set a default number of 1 ticket
                number_tickets = 1
            with open("purchases_made.txt", "a") as f:
                f.write(f"Name: {name} Age: {age} Ticket Type: {selection} Number of Tickets: {number_tickets} \n")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections")
            
    
    def clear_all(self):
        try:
            self.txtName.clear()
            self.txtAge.clear()
            self.cmbType.setCurrentIndex(0)
            self.rdOne.setChecked(True)
            self.txtCost.clear()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections")
    
    def display_data(self):
        try:
            index = self.tbTicketPurchase.currentIndex()
            
            if(index == 1):
                with open("purchases_made.txt", "r") as f:
                    for line in f:
                        self.lstPurchases.addItem(line)
            else:
                self.lstPurchases.clear()
        except FileNotFoundError:
            print("File is not present")
            
        except Exception as e:
            print((e), type(e))
        finally:
            print("Closing any open DB connections")
    
   
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ticketPurchase = QtWidgets.QMainWindow()
    ui = Ui_ticketPurchase()
    ui.setupUi(ticketPurchase)
    ticketPurchase.show()
    sys.exit(app.exec())
