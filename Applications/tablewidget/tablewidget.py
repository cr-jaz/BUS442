# Form implementation generated from reading ui file 'tablewidget.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb

class Ui_tableWidget(object):
    def setupUi(self, tableWidget):
        tableWidget.setObjectName("tableWidget")
        tableWidget.resize(410, 426)
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(9)
        tableWidget.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=tableWidget)
        self.centralwidget.setObjectName("centralwidget")
        self.btnDisplay = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnDisplay.setGeometry(QtCore.QRect(140, 30, 111, 41))
        self.btnDisplay.setObjectName("btnDisplay")
        self.tblStudentData = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tblStudentData.setGeometry(QtCore.QRect(25, 90, 361, 271))
        self.tblStudentData.setObjectName("tblStudentData")
        self.tblStudentData.setColumnCount(0)
        self.tblStudentData.setRowCount(0)
        tableWidget.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=tableWidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 410, 18))
        self.menubar.setObjectName("menubar")
        tableWidget.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=tableWidget)
        self.statusbar.setObjectName("statusbar")
        tableWidget.setStatusBar(self.statusbar)

        self.retranslateUi(tableWidget)
        QtCore.QMetaObject.connectSlotsByName(tableWidget)
        
        self.connecttodb()
        
        self.load_data()
        
        self.btnDisplay.clicked.connect(self.display_data)
        
    def display_data(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            
            cursorobj.execute("select * from studentinfo")
            results = cursorobj.fetchall()
            
            # Find number of rows in result set
            row_length = len(results)
            # Find the number of columns in the table
            col_length = len(cursorobj.description)
            
            # Create a column for the column names
            col_header = ["Student Id", "Student Name", "Student Age", "Student Score"]
            
            self.tblStudentData.setRowCount(row_length)
            self.tblStudentData.setColumnCount(col_length)
            self.tblStudentData.setHorizontalHeaderLabels(col_header)
            
            for rownumber, rowdata in enumerate(results):
                for colnumber, coldata in enumerate(rowdata):
                    self.tblStudentData.setItem(rownumber, colnumber, QtWidgets.QTableWidgetItem(str(coldata)))
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            connectionobj.close()
        
    def load_data(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            with open ("data.txt", "r") as filename:
                for line in filename:
                    # Data is a list with 4 items (id, name, age, score)
                    data = line.split(",")
                    cursorobj.execute("insert into studentinfo values (%s, %s, %s, %s)", [ data[0].strip(), data[1].strip(), data[2].strip(), data[3].strip() ])
                    connectionobj.commit()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            connectionobj.close()
            
    def connecttodb(self):
        try:
            connection = mdb.connect(
                host = "localhost", 
                user = "studentdbuser2", 
                password = "studentdbuser2", 
                database = "studentinfodb", 
                port = 3306)
            print("Connected to the DB")
            return connection
        except Exception as e:
            print(e)
            print(type(e))

    def retranslateUi(self, tableWidget):
        _translate = QtCore.QCoreApplication.translate
        tableWidget.setWindowTitle(_translate("tableWidget", "Table Widget"))
        self.btnDisplay.setText(_translate("tableWidget", "Display"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    tableWidget = QtWidgets.QMainWindow()
    ui = Ui_tableWidget()
    ui.setupUi(tableWidget)
    tableWidget.show()
    sys.exit(app.exec())
