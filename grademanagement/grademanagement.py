# Form implementation generated from reading ui file 'grademanagement.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb

class Ui_GradeManagement(object):
    def setupUi(self, GradeManagement):
        GradeManagement.setObjectName("GradeManagement")
        GradeManagement.resize(429, 439)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(9)
        GradeManagement.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=GradeManagement)
        self.centralwidget.setObjectName("centralwidget")
        self.tbGrade = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbGrade.setGeometry(QtCore.QRect(20, 20, 391, 361))
        self.tbGrade.setObjectName("tbGrade")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.lblId = QtWidgets.QLabel(parent=self.tab)
        self.lblId.setGeometry(QtCore.QRect(70, 20, 91, 16))
        self.lblId.setObjectName("lblId")
        self.txtId = QtWidgets.QLineEdit(parent=self.tab)
        self.txtId.setGeometry(QtCore.QRect(190, 20, 113, 20))
        self.txtId.setObjectName("txtId")
        self.lblName = QtWidgets.QLabel(parent=self.tab)
        self.lblName.setGeometry(QtCore.QRect(70, 60, 91, 16))
        self.lblName.setObjectName("lblName")
        self.txtName = QtWidgets.QLineEdit(parent=self.tab)
        self.txtName.setGeometry(QtCore.QRect(190, 60, 113, 20))
        self.txtName.setObjectName("txtName")
        self.txtScore = QtWidgets.QLineEdit(parent=self.tab)
        self.txtScore.setGeometry(QtCore.QRect(190, 100, 113, 20))
        self.txtScore.setObjectName("txtScore")
        self.lblScore = QtWidgets.QLabel(parent=self.tab)
        self.lblScore.setGeometry(QtCore.QRect(70, 100, 91, 16))
        self.lblScore.setObjectName("lblScore")
        self.btnInsert = QtWidgets.QPushButton(parent=self.tab)
        self.btnInsert.setGeometry(QtCore.QRect(30, 140, 101, 31))
        self.btnInsert.setObjectName("btnInsert")
        self.btnDisplay = QtWidgets.QPushButton(parent=self.tab)
        self.btnDisplay.setGeometry(QtCore.QRect(270, 140, 101, 31))
        self.btnDisplay.setObjectName("btnDisplay")
        self.tbDisplayData = QtWidgets.QTableWidget(parent=self.tab)
        self.tbDisplayData.setGeometry(QtCore.QRect(30, 190, 321, 131))
        self.tbDisplayData.setObjectName("tbDisplayData")
        self.tbDisplayData.setColumnCount(0)
        self.tbDisplayData.setRowCount(0)
        self.tbGrade.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.lstData = QtWidgets.QListWidget(parent=self.tab_2)
        self.lstData.setGeometry(QtCore.QRect(30, 51, 321, 171))
        self.lstData.setObjectName("lstData")
        self.lblDisplay = QtWidgets.QLabel(parent=self.tab_2)
        self.lblDisplay.setGeometry(QtCore.QRect(130, 20, 91, 21))
        self.lblDisplay.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lblDisplay.setObjectName("lblDisplay")
        self.btnExport = QtWidgets.QPushButton(parent=self.tab_2)
        self.btnExport.setGeometry(QtCore.QRect(140, 250, 81, 31))
        self.btnExport.setObjectName("btnExport")
        self.tbGrade.addTab(self.tab_2, "")
        GradeManagement.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=GradeManagement)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 429, 17))
        self.menubar.setObjectName("menubar")
        GradeManagement.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=GradeManagement)
        self.statusbar.setObjectName("statusbar")
        GradeManagement.setStatusBar(self.statusbar)

        self.retranslateUi(GradeManagement)
        self.tbGrade.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(GradeManagement)
        
        # Establish a connection with mysql
        self.connecttodb()
        
        # Load the external file to the sql database
        self.load_data()
        
        # When the insert button is clicked, Accept the student id, student name and student score from the text boxes and insert data to the student table.
        self.btnInsert.clicked.connect(self.insert_data)
        
        # When the Display button is clicked, it will display all rows of data from the database table to the “Table Widget” object
        self.btnDisplay.clicked.connect(self.display_data)
        
        # When the tab is switch, it will execute this function
        self.tbGrade.currentChanged.connect(self.list_data)
        
        # When the Export button is clicked, Write student id, student name and student grade to an external file called studentgrades.txt.
        self.btnExport.clicked.connect(self.export_data)
    
    def export_data(self):
        try:
            conn = self.connecttodb()
            cursorobj = conn.cursor()
            cursorobj.execute("select * from studentinfo")
            results = cursorobj.fetchall()
            
            # Since we need to write in the newly created text file, then open this file in write mode
            # Write student id, student name and student grade to an external file called studentgrades.txt.
            with open("studentgrades.txt", "w") as f:
                for row in results:
                    sid, sname, sscore = row
                    if (sscore >= 90 and sscore <= 100):
                        performance = "A"
                    elif (sscore >=80 and sscore <= 89):
                        performance = "B"
                    elif (sscore >=70 and sscore <= 79):
                        performance = "C"
                    elif (sscore >=60 and sscore <= 69):
                        performance = "D"
                    else:
                        performance = "F"
                
                    # Each student's data should be in a new line
                    f.write(f"{sid}, {sname}, {sscore}, {performance} \n")
            
            # Create a message box instance that lets the user know the data has been successfully exported
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Student Grade -- Export")
            msg.setText("Student grades exported successfully to studentgrades.txt!")
            msg.exec()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            if conn:
                conn.close()
    
    def list_data(self):
        try:
            
            conn = self.connecttodb()
            cursorobj = conn.cursor()
            cursorobj.execute("select * from studentinfo")
            results = cursorobj.fetchall()
            
            self.lstData.clear()
            
            # Format the list headers in an organized way
            self.lstData.addItem(f"{'ID':<6}{'NAME':<18}{'SCORE':<8}{'PERFORMANCE'}")
            
            # Add a new variable to the list widget that shows what the performance of each student is based on the score
            for row in results:
                sid, sname, sscore = row
                if (sscore >= 90 and sscore <= 100):
                    performance = "A"
                elif (sscore >=80 and sscore <= 89):
                    performance = "B"
                elif (sscore >=70 and sscore <= 79):
                    performance = "C"
                elif (sscore >=60 and sscore <= 69):
                    performance = "D"
                else:
                    performance = "F"
                
                # Format the list widget in a organized way 
                self.lstData.addItem(f"{str(sid):<6}{sname:<18}{str(sscore):<8}{performance}")

        except Exception as e:
            print(e)
            print(type(e))
        finally:
            if(conn):
                conn.close()
            
    
    def display_data(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            
            cursorobj.execute("select * from studentinfo")
            results = cursorobj.fetchall()
            
            # Find number of rows in result set
            row_length = len(results)
            # Find the number of columns in the table
            col_length = len(cursorobj.description)
            
            # Create a column for the column names
            col_header = ["Student Id", "Student Name", "Student Score"]
            
            self.tbDisplayData.setRowCount(row_length)
            self.tbDisplayData.setColumnCount(col_length)
            self.tbDisplayData.setHorizontalHeaderLabels(col_header)
            
            for rownumber, rowdata in enumerate(results):
                for colnumber, coldata in enumerate(rowdata):
                    self.tbDisplayData.setItem(rownumber, colnumber, QtWidgets.QTableWidgetItem(str(coldata)))
        except Exception as e:
            print (e)
            print(type(e))
        finally:
            connectionobj.close()

    def insert_data(self):
        try:
            # Define variables
            sid = self.txtId.text()
            sname = self.txtName.text()
            sscore = self.txtScore.text()

            # Create a message box instance
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Student Grade Management")
            
            # Establish a database connection and store the connection obj in variable 'conn'
            conn = self.connecttodb()
            
            # Ensure the input validations for the text boxes
            if (sid.isdigit()):
                sid = int(self.txtId.text().strip())
                if (int(sscore)):
                    sscore = int(self.txtScore.text().strip())
                    if (sscore >= 0 and sscore <= 100):
                        # Ensure that the user will input something for name box so there are no null values within the database
                        if (sname != ""):
                        
                            # Create a cursor object
                            cursorobj = conn.cursor()
                            cursorobj.execute("insert into studentinfo values (%s, %s, %s)", [sid, sname, sscore])
                        
                            # Commits the insert transaction to the database table
                            conn.commit()
                            msg.setText("Student Data has been successfully imported!")
                            msg.exec()
                        else:
                            msg.setText("Student Name cannot be empty.")
                            msg.exec()
                    else:
                        msg.setText("Invalid Score. Enter a value between 0 and 100.")
                        msg.exec()
                else:
                    msg.setText("Invalid Score. Enter an integer value.")
                    msg.exec()
            else:
                msg.setText("Invalid ID. Enter an integer value.")
                msg.exec()

        except ValueError as v:
            # Ensure that the Student Score isn't empty to prevent any null values in the database
            msg.setText("Student Score cannot be empty.")
            msg.exec()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            # If connection object exists
            if(conn):
                conn.close()
    
    def load_data(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            with open ("gradestudentdata.txt", "r") as filename:
                for line in filename:
                    # Data is a list with 3 items (id, name, score)
                    data = line.split(",")
                    cursorobj.execute("insert into studentinfo values (%s, %s, %s)", [ data[0].strip(), data[1].strip(), data[2].strip() ])
                    connectionobj.commit()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            connectionobj.close()
    
    def connecttodb(self):
        try:
            connection = mdb.connect(
                host = "localhost", 
                user = "projectuser", 
                password = "projectuser", 
                database = "project4db", 
                port = 3306)
            print("Connected to the DB")
            return connection
        except Exception as e:
            print(e)
            Print(type(e))
    


    def retranslateUi(self, GradeManagement):
        _translate = QtCore.QCoreApplication.translate
        GradeManagement.setWindowTitle(_translate("GradeManagement", "Grade Management"))
        self.lblId.setText(_translate("GradeManagement", "Student ID:"))
        self.lblName.setText(_translate("GradeManagement", "Student Name:"))
        self.txtScore.setText(_translate("GradeManagement", " "))
        self.lblScore.setText(_translate("GradeManagement", "Student Score:"))
        self.btnInsert.setText(_translate("GradeManagement", "Insert Data"))
        self.btnDisplay.setText(_translate("GradeManagement", "Display Data"))
        self.tbGrade.setTabText(self.tbGrade.indexOf(self.tab), _translate("GradeManagement", "Student Info"))
        self.lblDisplay.setText(_translate("GradeManagement", "Student Data"))
        self.btnExport.setText(_translate("GradeManagement", "Export Data"))
        self.tbGrade.setTabText(self.tbGrade.indexOf(self.tab_2), _translate("GradeManagement", "Student Grade"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GradeManagement = QtWidgets.QMainWindow()
    ui = Ui_GradeManagement()
    ui.setupUi(GradeManagement)
    GradeManagement.show()
    sys.exit(app.exec())
