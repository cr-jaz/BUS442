# Form implementation generated from reading ui file 'display.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb

class Ui_display(object):
    def setupUi(self, display):
        display.setObjectName("display")
        display.resize(714, 425)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        display.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=display)
        self.centralwidget.setObjectName("centralwidget")
        self.tblAllTransactions = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tblAllTransactions.setGeometry(QtCore.QRect(80, 50, 561, 311))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.tblAllTransactions.setFont(font)
        self.tblAllTransactions.setObjectName("tblAllTransactions")
        self.tblAllTransactions.setColumnCount(0)
        self.tblAllTransactions.setRowCount(0)
        self.lblAllTransactions = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblAllTransactions.setGeometry(QtCore.QRect(90, 20, 141, 21))
        self.lblAllTransactions.setObjectName("lblAllTransactions")
        display.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=display)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 714, 17))
        self.menubar.setObjectName("menubar")
        display.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=display)
        self.statusbar.setObjectName("statusbar")
        display.setStatusBar(self.statusbar)

        self.retranslateUi(display)
        QtCore.QMetaObject.connectSlotsByName(display)
        
        # Load in the data into the table widget
        self.display_data()
        
    def display_data(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            
            cursorobj.execute("select * from book_sales")
            results = cursorobj.fetchall()
            
            # Find number of rows in result set
            row_length = len(results)
            # Find the number of columns in the table
            col_length = len(cursorobj.description)
            
            # Create a column for the column names
            col_header = ["Transaction Id", "Customer Name", "Book Title", "Quantity", "Total Price"]
            
            self.tblAllTransactions.setRowCount(row_length)
            self.tblAllTransactions.setColumnCount(col_length)
            self.tblAllTransactions.setHorizontalHeaderLabels(col_header)
            
            for rownumber, rowdata in enumerate(results):
                for colnumber, coldata in enumerate(rowdata):
                    self.tblAllTransactions.setItem(rownumber, colnumber, QtWidgets.QTableWidgetItem(str(coldata)))
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            connectionobj.close()
            print("Display Window: Closing any open database connections")
    
    def connecttodb(self):
        try:
            connection = mdb.connect(
                host = "localhost", 
                user = "finaluser", 
                password = "finaluser", 
                database = "finalprojectdb", 
                port = 3306)
            print("Display Window: Connected to the DB")
            return connection
        except Exception as e:
            print(e)
            print(type(e))

    def retranslateUi(self, display):
        _translate = QtCore.QCoreApplication.translate
        display.setWindowTitle(_translate("display", "Display"))
        self.lblAllTransactions.setText(_translate("display", "All Transactions"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    display = QtWidgets.QMainWindow()
    ui = Ui_display()
    ui.setupUi(display)
    display.show()
    sys.exit(app.exec())
