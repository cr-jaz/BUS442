# Form implementation generated from reading ui file 'search.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb

class Ui_search(object):
    def setupUi(self, search):
        search.setObjectName("search")
        search.resize(710, 427)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        search.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=search)
        self.centralwidget.setObjectName("centralwidget")
        self.cmbUniqueBook = QtWidgets.QComboBox(parent=self.centralwidget)
        self.cmbUniqueBook.setGeometry(QtCore.QRect(290, 50, 221, 22))
        self.cmbUniqueBook.setObjectName("cmbUniqueBook")
        self.cmbUniqueBook.addItem("")
        self.cmbUniqueBook.addItem("")
        self.cmbUniqueBook.addItem("")
        self.cmbUniqueBook.addItem("")
        self.cmbUniqueBook.addItem("")
        self.lblUniqueBook = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblUniqueBook.setGeometry(QtCore.QRect(130, 50, 141, 21))
        self.lblUniqueBook.setObjectName("lblUniqueBook")
        self.lblAvgPrice = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblAvgPrice.setGeometry(QtCore.QRect(130, 110, 141, 21))
        self.lblAvgPrice.setObjectName("lblAvgPrice")
        self.txtAvgPrice = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtAvgPrice.setGeometry(QtCore.QRect(290, 110, 221, 21))
        self.txtAvgPrice.setReadOnly(True)
        self.txtAvgPrice.setObjectName("txtAvgPrice")
        self.tblPrevious = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tblPrevious.setGeometry(QtCore.QRect(90, 190, 531, 192))
        self.tblPrevious.setObjectName("tblPrevious")
        self.tblPrevious.setColumnCount(0)
        self.tblPrevious.setRowCount(0)
        self.lblPrevious = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblPrevious.setGeometry(QtCore.QRect(130, 160, 201, 21))
        self.lblPrevious.setObjectName("lblPrevious")
        search.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=search)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 710, 18))
        self.menubar.setObjectName("menubar")
        search.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=search)
        self.statusbar.setObjectName("statusbar")
        search.setStatusBar(self.statusbar)

        self.retranslateUi(search)
        QtCore.QMetaObject.connectSlotsByName(search)
        
        self.connecttodb()
        
        # Call the function to show the data when the user opens the window
        self.display_data()
        
        # Display the subtotal and the total on the window
        self.cmbUniqueBook.currentIndexChanged.connect(self.display_data)

    def display_data(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            
            # Store the selected book in a variable
            book_selection = self.cmbUniqueBook.currentText()
            
            cursorobj.execute("select * from book_sales where booktitle = %s", (book_selection,))
            results = cursorobj.fetchall()
            
            # If there are transactions, calculate the average price
            if results:
                total_price = [(row[4]) for row in results]
                avg_price = sum(total_price) / len(total_price)
                self.txtAvgPrice.setText(f"{avg_price:.2f}")
            else:
                self.txtAvgPrice.setText("No Transactions")
            
            # Find number of rows in result set
            row_length = len(results)
            # Find the number of columns in the table
            col_length = len(cursorobj.description)
            
            # Create a column for the column names
            col_header = ["Transaction Id", "Customer Name", "Book Title", "Quantity", "Total Price"]
            
            self.tblPrevious.setRowCount(row_length)
            self.tblPrevious.setColumnCount(col_length)
            self.tblPrevious.setHorizontalHeaderLabels(col_header)
            
            for rownumber, rowdata in enumerate(results):
                for colnumber, coldata in enumerate(rowdata):
                    self.tblPrevious.setItem(rownumber, colnumber, QtWidgets.QTableWidgetItem(str(coldata)))
            
        except Exception as e:
            print(e)
            print(type(e))
            # Create a message box to let the user know any errors
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Error!")
            msg.setText(f"An unexpected error occured:\n{e}")
            msg.exec()
        finally:
            # Close the database connection
            connectionobj.close()
            print("Search Window: Closing any open database connections")
        
    
    def retranslateUi(self, search):
        _translate = QtCore.QCoreApplication.translate
        search.setWindowTitle(_translate("search", "Search"))
        self.cmbUniqueBook.setItemText(0, _translate("search", "The Great Gatsby"))
        self.cmbUniqueBook.setItemText(1, _translate("search", "To Kill a Mocking Bird"))
        self.cmbUniqueBook.setItemText(2, _translate("search", "The Catcher in the Rye"))
        self.cmbUniqueBook.setItemText(3, _translate("search", "Moby Dick"))
        self.cmbUniqueBook.setItemText(4, _translate("search", "The Lord of the Rings"))
        self.lblUniqueBook.setText(_translate("search", "Unique Book Names:"))
        self.lblAvgPrice.setText(_translate("search", "Average Price:"))
        self.lblPrevious.setText(_translate("search", "Previous Transaction on the book:"))



    def connecttodb(self):
        try:
            connection = mdb.connect(
                host = "localhost", 
                user = "finaluser", 
                password = "finaluser", 
                database = "finalprojectdb", 
                port = 3306)
            print("Search Window: Connected to the DB")
            return connection
        except Exception as e:
            print(e)
            Print(type(e))
            

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    search = QtWidgets.QMainWindow()
    ui = Ui_search()
    ui.setupUi(search)
    search.show()
    sys.exit(app.exec())
