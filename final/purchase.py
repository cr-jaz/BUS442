# Form implementation generated from reading ui file 'purchase.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb

class Ui_purchase(object):
    def setupUi(self, purchase):
        purchase.setObjectName("purchase")
        purchase.resize(713, 427)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        purchase.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=purchase)
        self.centralwidget.setObjectName("centralwidget")
        self.lblQuantity = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblQuantity.setGeometry(QtCore.QRect(40, 180, 131, 21))
        self.lblQuantity.setObjectName("lblQuantity")
        self.lblBookName = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblBookName.setGeometry(QtCore.QRect(40, 130, 131, 21))
        self.lblBookName.setObjectName("lblBookName")
        self.cmbBookName = QtWidgets.QComboBox(parent=self.centralwidget)
        self.cmbBookName.setGeometry(QtCore.QRect(170, 130, 171, 22))
        self.cmbBookName.setObjectName("cmbBookName")
        self.cmbBookName.addItem("")
        self.cmbBookName.addItem("")
        self.cmbBookName.addItem("")
        self.cmbBookName.addItem("")
        self.cmbBookName.addItem("")
        self.txtTransactionId = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTransactionId.setGeometry(QtCore.QRect(170, 80, 171, 20))
        self.txtTransactionId.setObjectName("txtTransactionId")
        self.txtQuantity = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtQuantity.setGeometry(QtCore.QRect(170, 180, 171, 20))
        self.txtQuantity.setObjectName("txtQuantity")
        self.lblTransactionId = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTransactionId.setGeometry(QtCore.QRect(40, 80, 131, 21))
        self.lblTransactionId.setObjectName("lblTransactionId")
        self.btnBookPurchase = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnBookPurchase.setGeometry(QtCore.QRect(250, 310, 131, 31))
        self.btnBookPurchase.setObjectName("btnBookPurchase")
        self.lblSubtotal = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblSubtotal.setGeometry(QtCore.QRect(390, 80, 131, 21))
        self.lblSubtotal.setObjectName("lblSubtotal")
        self.txtSubtotal = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtSubtotal.setGeometry(QtCore.QRect(490, 80, 101, 20))
        self.txtSubtotal.setObjectName("txtSubtotal")
        self.txtSubtotal.setReadOnly(True)
        self.lblTax = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTax.setGeometry(QtCore.QRect(390, 130, 201, 21))
        self.lblTax.setObjectName("lblTax")
        self.txtTotal = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTotal.setGeometry(QtCore.QRect(490, 180, 101, 20))
        self.txtTotal.setReadOnly(True)
        self.txtTotal.setObjectName("txtTotal")
        self.lblTotal = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTotal.setGeometry(QtCore.QRect(390, 180, 131, 21))
        self.lblTotal.setObjectName("lblTax")
        purchase.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=purchase)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 713, 18))
        self.menubar.setObjectName("menubar")
        purchase.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=purchase)
        self.statusbar.setObjectName("statusbar")
        purchase.setStatusBar(self.statusbar)

        self.retranslateUi(purchase)
        QtCore.QMetaObject.connectSlotsByName(purchase)
        
        self.connecttodb()
        
        # Create an empty dictionary to store ticket type & price
        self.price_data = {}
        self.load_data("bookdata.txt")
        
        # When this button is clicked, the purchase will store into the database
        self.btnBookPurchase.clicked.connect(self.purchase_book)
        
        # Display the subtotal and the total on the window
        self.cmbBookName.currentIndexChanged.connect(self.display_price)
        # Let the function know when the user enters a valid value into the textbox 
        self.txtQuantity.textChanged.connect(self.display_price)
        
        # Add a placeholder for the customer name variable
        self.customername = ""
    
    def set_cname(self,name):
        self.customername = name
  
    def load_data(self, filename):
        try:
            with open(filename, "r") as f:
                for line in f:
                    data = line.split(",")
                    self.price_data[data[0]] = int(data[1])
        except FileNotFoundError:
            print("File not present")
        except Exception as e:
            print(e)
            print(type(e))
    
    def display_price(self):
         # Store the current selected fruit in the variable: book_selection
        book_selection = self.cmbBookName.currentText()
        quantity = self.txtQuantity.text().strip()
        
        if(book_selection in self.price_data.keys()):
            # Get the price_per_unit price_data dictionary
            price = self.price_data.get(book_selection) 
            
            # Validate that the quantity is a valid number
            if (quantity.isdigit()):
                quantity = int(quantity)
                
                # Define variables
                subtotal = price * quantity
                tax = subtotal * 0.08
                total = subtotal + tax
                
                # Display the subtotal to the user by using the txt box
                self.txtSubtotal.setText(f"${subtotal:.2f}")
                # Display the total price using the text box
                self.txtTotal.setText(f"${total:.2f}")
            else:
                self.txtSubtotal.setText("No Valid Quantity")
                self.txtTotal.setText("")
        else:
            self.txtSubtotal.setText("")
            self.txtTotal.setText("")
    
    def purchase_book(self):
        try:
            connectionobj = self.connecttodb()
            cursorobj = connectionobj.cursor()
            
            tid = self.txtTransactionId.text()
            book_select = self.cmbBookName.currentText()
            quantity = self.txtQuantity.text()
            
            
            # Create a Message box instance
            msg = QtWidgets.QMessageBox()
        
            # Set the message box window title 
            msg.setWindowTitle("Book Purchase Application")
            
            # Make sure the user inputs a name in the name textbox
            if self.customername.strip() == "":
                msg.setText("Customer Name is required! Close this window and enter a name in the Dashboard window.")
                msg.exec()
                return
            else:
                pass

            # Ensure the user has inputed a valid value
            if(tid.isdigit()):
                tid = int(self.txtTransactionId.text().strip())
                if(quantity.isdigit()):
                    quantity = int(self.txtQuantity.text().strip())

                    # Get the price of the book from the dictionary
                    price_per_unit = self.price_data[book_select]
                
                    # Calculate the price of the purchase
                    subtotal = price_per_unit * quantity
                    tax = subtotal * 0.08
                    total = subtotal + tax
                
                     # Establish a database connection and store the connection obj in variable 'conn'
                    conn = self.connecttodb()
            
                    # Create a cursor object
                    cursorobj = conn.cursor()
                    cursorobj.execute("insert into book_sales values (%s, %s, %s, %s, %s)", [tid, self.customername, book_select, quantity, total])
            
                    # Commits the insert transaction to the database table
                    conn.commit()  
                    
                    # Show a message box where 
                    msg.setText("Success! Purchase completed.")
                    msg.exec()
                else:
                    msg.setText("Invalid Quantity. Enter an integer value.")
                    msg.exec()
            else:
                msg.setText("Invalid ID. Enter an integer value.")
                msg.exec()
        except Exception as e:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Error!")
            msg.setText(f"An unexpected error occured:\n{e}")
            msg.exec()
        finally:
            connectionobj.close()
            print("Purchase Window: Closing any open database connections")
            
            
    def connecttodb(self):
        try:
            connection = mdb.connect(
                host = "localhost", 
                user = "finaluser", 
                password = "finaluser", 
                database = "finalprojectdb", 
                port = 3306)
            print("Purchase Window: Connected to the DB")
            return connection
        except Exception as e:
            print(e)
            Print(type(e))
    
    def retranslateUi(self, purchase):
        _translate = QtCore.QCoreApplication.translate
        purchase.setWindowTitle(_translate("purchase", "Purchase"))
        self.lblQuantity.setText(_translate("purchase", "Quantity:"))
        self.lblBookName.setText(_translate("purchase", "Book Name:"))
        self.cmbBookName.setItemText(0, _translate("purchase", "The Great Gatsby"))
        self.cmbBookName.setItemText(1, _translate("purchase", "To Kill a Mockingbird"))
        self.cmbBookName.setItemText(2, _translate("purchase", "The Catcher in the Rye"))
        self.cmbBookName.setItemText(3, _translate("purchase", "Moby Dick"))
        self.cmbBookName.setItemText(4, _translate("purchase", "The Lord of the Rings"))
        self.lblTransactionId.setText(_translate("purchase", "Transaction ID:"))
        self.btnBookPurchase.setText(_translate("purchase", "Purchase"))
        self.lblSubtotal.setText(_translate("purchase", "Subtotal:"))
        self.lblTax.setText(_translate("purchase", "Tax:                              8%"))
        self.lblTotal.setText(_translate("purchase", "Total:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    purchase = QtWidgets.QMainWindow()
    ui = Ui_purchase()
    ui.setupUi(purchase)
    purchase.show()
    sys.exit(app.exec())
