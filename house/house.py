# Form implementation generated from reading ui file 'house.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_homePurchase(object):
    def setupUi(self, homePurchase):
        homePurchase.setObjectName("homePurchase")
        homePurchase.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        homePurchase.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=homePurchase)
        self.centralwidget.setObjectName("centralwidget")
        self.tabPurchase = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabPurchase.setGeometry(QtCore.QRect(20, 10, 761, 541))
        self.tabPurchase.setObjectName("tabPurchase")
        self.tabHome = QtWidgets.QWidget()
        self.tabHome.setObjectName("tabHome")
        self.lblFirstName = QtWidgets.QLabel(parent=self.tabHome)
        self.lblFirstName.setGeometry(QtCore.QRect(30, 30, 121, 21))
        self.lblFirstName.setObjectName("lblFirstName")
        self.txtFirstName = QtWidgets.QLineEdit(parent=self.tabHome)
        self.txtFirstName.setGeometry(QtCore.QRect(180, 30, 113, 20))
        self.txtFirstName.setObjectName("txtFirstName")
        self.txtLastName = QtWidgets.QLineEdit(parent=self.tabHome)
        self.txtLastName.setGeometry(QtCore.QRect(500, 30, 113, 20))
        self.txtLastName.setText("")
        self.txtLastName.setObjectName("txtLastName")
        self.lblLastName = QtWidgets.QLabel(parent=self.tabHome)
        self.lblLastName.setGeometry(QtCore.QRect(350, 30, 121, 21))
        self.lblLastName.setObjectName("lblLastName")
        self.lblAge = QtWidgets.QLabel(parent=self.tabHome)
        self.lblAge.setGeometry(QtCore.QRect(30, 80, 121, 21))
        self.lblAge.setObjectName("lblAge")
        self.txtAge = QtWidgets.QLineEdit(parent=self.tabHome)
        self.txtAge.setGeometry(QtCore.QRect(180, 80, 113, 20))
        self.txtAge.setText("")
        self.txtAge.setObjectName("txtAge")
        self.lblHouseType = QtWidgets.QLabel(parent=self.tabHome)
        self.lblHouseType.setGeometry(QtCore.QRect(30, 150, 121, 21))
        self.lblHouseType.setObjectName("lblHouseType")
        self.cmbHouseType = QtWidgets.QComboBox(parent=self.tabHome)
        self.cmbHouseType.setGeometry(QtCore.QRect(180, 150, 141, 22))
        self.cmbHouseType.setObjectName("cmbHouseType")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.grpModelType = QtWidgets.QGroupBox(parent=self.tabHome)
        self.grpModelType.setGeometry(QtCore.QRect(340, 150, 391, 80))
        self.grpModelType.setObjectName("grpModelType")
        self.radStandard = QtWidgets.QRadioButton(parent=self.grpModelType)
        self.radStandard.setGeometry(QtCore.QRect(20, 30, 91, 21))
        self.radStandard.setObjectName("radStandard")
        self.radSmart = QtWidgets.QRadioButton(parent=self.grpModelType)
        self.radSmart.setGeometry(QtCore.QRect(160, 30, 91, 21))
        self.radSmart.setObjectName("radSmart")
        self.radLuxury = QtWidgets.QRadioButton(parent=self.grpModelType)
        self.radLuxury.setGeometry(QtCore.QRect(280, 30, 91, 21))
        self.radLuxury.setObjectName("radLuxury")
        self.lblPayment = QtWidgets.QLabel(parent=self.tabHome)
        self.lblPayment.setGeometry(QtCore.QRect(30, 270, 121, 21))
        self.lblPayment.setObjectName("lblPayment")
        self.txtPayment = QtWidgets.QLineEdit(parent=self.tabHome)
        self.txtPayment.setGeometry(QtCore.QRect(180, 270, 113, 20))
        self.txtPayment.setText("")
        self.txtPayment.setObjectName("txtPayment")
        self.lstMonthly = QtWidgets.QListWidget(parent=self.tabHome)
        self.lstMonthly.setGeometry(QtCore.QRect(340, 270, 391, 192))
        self.lstMonthly.setObjectName("lstMonthly")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.tabHome)
        self.btnPurchase.setGeometry(QtCore.QRect(110, 370, 101, 21))
        self.btnPurchase.setObjectName("btnPurchase")
        self.btnShow = QtWidgets.QPushButton(parent=self.tabHome)
        self.btnShow.setGeometry(QtCore.QRect(110, 320, 101, 21))
        self.btnShow.setObjectName("btnShow")
        self.btnClear = QtWidgets.QPushButton(parent=self.tabHome)
        self.btnClear.setGeometry(QtCore.QRect(30, 440, 101, 21))
        self.btnClear.setObjectName("btnClear")
        self.btnExit = QtWidgets.QPushButton(parent=self.tabHome)
        self.btnExit.setGeometry(QtCore.QRect(210, 440, 101, 21))
        self.btnExit.setObjectName("btnExit")
        self.tabPurchase.addTab(self.tabHome, "")
        self.tabMade = QtWidgets.QWidget()
        self.tabMade.setObjectName("tabMade")
        self.lblPrevious = QtWidgets.QLabel(parent=self.tabMade)
        self.lblPrevious.setGeometry(QtCore.QRect(280, 20, 201, 21))
        self.lblPrevious.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lblPrevious.setObjectName("lblPrevious")
        self.listWidget = QtWidgets.QListWidget(parent=self.tabMade)
        self.listWidget.setGeometry(QtCore.QRect(25, 60, 711, 431))
        self.listWidget.setObjectName("listWidget")
        self.tabPurchase.addTab(self.tabMade, "")
        homePurchase.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=homePurchase)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 18))
        self.menubar.setObjectName("menubar")
        homePurchase.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=homePurchase)
        self.statusbar.setObjectName("statusbar")
        homePurchase.setStatusBar(self.statusbar)

        self.retranslateUi(homePurchase)
        self.tabPurchase.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(homePurchase)
        
        # Create an empty dictionary to store house type & price
        self.house_data = {}
        # Load the external file containing the pricing data
        self.load_data("housedata.txt")
        
        # When the clear button is clicked, it will clear all text boxes
        self.btnClear.clicked.connect(self.clear_all)
        
        # When the exit button is clicked, it will exit the application
        self.btnExit.clicked.connect(self.exit_app)
        
        # When the Show Payments button is clicked, calculate & display the monthly pmts in the list widget
        self.btnShow.clicked.connect(self.show_payments)
        
        # When the tab is switch, it will execute this function
        self.tabPurchase.currentChanged.connect(self.display_data)
        
        # When the purchase button is clicked, save the purchase info
        self.btnPurchase.clicked.connect(self.purchases)

    def retranslateUi(self, homePurchase):
        _translate = QtCore.QCoreApplication.translate
        homePurchase.setWindowTitle(_translate("homePurchase", "MainWindow"))
        self.lblFirstName.setText(_translate("homePurchase", "Enter First Name:"))
        self.lblLastName.setText(_translate("homePurchase", "Enter Last Name:"))
        self.lblAge.setText(_translate("homePurchase", "Enter Your Age:"))
        self.lblHouseType.setText(_translate("homePurchase", "Select a House Type:"))
        self.cmbHouseType.setItemText(0, _translate("homePurchase", "Select House Type"))
        self.cmbHouseType.setItemText(1, _translate("homePurchase", "Apartment"))
        self.cmbHouseType.setItemText(2, _translate("homePurchase", "Townhouse"))
        self.cmbHouseType.setItemText(3, _translate("homePurchase", "Single-Family Home"))
        self.cmbHouseType.setItemText(4, _translate("homePurchase", "Luxury Villa"))
        self.grpModelType.setTitle(_translate("homePurchase", "Select a Model Type"))
        self.radStandard.setText(_translate("homePurchase", "Standard"))
        self.radSmart.setText(_translate("homePurchase", "Smart"))
        self.radLuxury.setText(_translate("homePurchase", "Luxury"))
        self.lblPayment.setText(_translate("homePurchase", "Initial Down Payment:"))
        self.btnPurchase.setText(_translate("homePurchase", "Purchase"))
        self.btnShow.setText(_translate("homePurchase", "Show Payments"))
        self.btnClear.setText(_translate("homePurchase", "Clear"))
        self.btnExit.setText(_translate("homePurchase", "Exit"))
        self.tabPurchase.setTabText(self.tabPurchase.indexOf(self.tabHome), _translate("homePurchase", "Home Purchase"))
        self.lblPrevious.setText(_translate("homePurchase", "All Previous Home Purchases:"))
        self.tabPurchase.setTabText(self.tabPurchase.indexOf(self.tabMade), _translate("homePurchase", "Purchases Made"))
    
    def load_data (self, filename):
        try:
            with open(filename, "r") as f:
                for line in f:
                    data = line.split(",")
                    self.house_data[data[0]] = int(data[1])
        except FileNotFoundError:
            print("This file does not exist")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections in load_data")

    def clear_all (self):
        try:
            # Clear all textboxes, lists, and reset any combo boxes & radio buttons
            self.txtFirstName.clear()
            self.txtLastName.clear()
            
            self.txtAge.clear()
            
            self.cmbHouseType.setCurrentIndex(0)
            
            self.radStandard.setChecked(True)
            
            self.txtPayment.clear()
            self.lstMonthly.clear()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections in clear_all")
    
    def exit_app (self):
        try:
            # Exit the application
            QtWidgets.QApplication.quit()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections in exit_app")
    
    def show_payments (self):
        try:
            # Clear the previous list for convience
            self.lstMonthly.clear()
            
            # Create a message box instance
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Home Purchase")
            
            # Remove any unnecessary spaces
            down_payment = self.txtPayment.text().strip()
            
            # Make sure the user input is a numeric value
            if (int(float(down_payment))):
                down_payment = float(self.txtPayment.text())
                # Make sure the down payment is a positive value
                if (down_payment >= 0):
                    # This variable will contain the house type
                    house_selection = self.cmbHouseType.currentText()
                    # This variable will retrieve the corresponding value from the dictionary
                    price = self.house_data.get(house_selection)
            
            
                    # Store the given information from the project description into variables
                    annual_interest_rate = 0.07
                    loan_term_months = 120
                    monthly_rate = annual_interest_rate/12
            
                    # Set a variable to keep track of the total monthly payment
                    monthly_payment = 0
            
                    # Let the user know that they need to choose a house type before moving forward
                    if (house_selection in self.house_data.keys()):
                        price = self.house_data.get(house_selection)
                    
                        # Adjust the base house prices based on the model type
                        if self.radStandard.isChecked():
                            end_price = price
                        elif self.radSmart.isChecked():
                            end_price = price * 1.15
                        elif self.radLuxury.isChecked():
                            end_price = price * 1.20
                        else:
                            end_price = price
                        
                        # Define the remaining variables necessary for the monthly payment
                        loan_amount = price - down_payment
                        remaining_amount = loan_amount  
                        
                        # Establish the monthly payment forumla
                        monthly_payment = loan_amount * monthly_rate * (1 + monthly_rate) ** loan_term_months / ((1 + monthly_rate) ** loan_term_months - 1)

                        # Calculate the remaining amount to pay the house value left every month until the loan term months equals 120
                        for months in range(1,loan_term_months+1):
                            interest = remaining_amount * monthly_rate
                            principal = monthly_payment - interest
                            remaining_amount = remaining_amount - principal
                            
                            # Make sure the list doesn't show any negative numbers but rather 0 to indicate it has been paid off
                            remaining_amount = max(0,remaining_amount)
                            
                            # If the remaining_amount is equal to 0, then break the for loop
                            if remaining_amount == 0:
                                break
                            
                            # Display the calculation in the list widget on the home purchases tab
                            self.lstMonthly.addItem("Months: " + str(months) + "     Remaining Amount: " + f"${remaining_amount:.2f}" + "     Monthly Payment: " + f"${monthly_payment:.2f}") 
                    else: 
                        msg.setText("Please select a valid house type")
                        msg.exec()
                else:
                    msg.setText("Please enter a numeric value equal greater than or equal to 0")
                    msg.exec()
            else:
                msg.setText("Please enter a numeric value")
                msg.exec()
        except ValueError as v:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Home Purchase")
            msg.setText("Please enter value in the Down Payment text box")
            msg.exec()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections in show_payments")
    
    def purchases (self):
        try:
            # Create a message box instance
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Home Purchase")
            
            # Assign the variables
            f_name = self.txtFirstName.text()
            l_name = self.txtLastName.text()
            # Make sure to remove any unnecessary spaces
            age = self.txtAge.text().strip()
            selection = self.cmbHouseType.currentText()
            
            try:
                # Make sure the age textbox can accept all types of numbers
                age = float(age)
                # Now make sure that the age textbox can only accept integers and not decimals
                if (int(age)):
                    age = int(age)
                    # Make sure the integer value is above 0
                    if (age > 0):
                        # Make sure the house selection is within the dictionary, if not, create a message box stating so
                        if (selection in self.house_data.keys()):
                            house_selected = selection
                        else:
                            msg.setText("Please select a valid house type")
                            msg.exec()
                    else:
                        msg.setText("Please enter a valid age above 0")
                        msg.exec()
                else:
                    msg.setText("Please enter an integer value")
                    msg.exec()
            except ValueError as v:
                # If the user doesn't put anything in the textbox, make sure to notify them
                msg.setText("Please enter a numeric value")
                msg.exec()
            
            # Establish the model variable for future use
            if self.radStandard.isChecked():
                model = "Standard"
            elif self.radSmart.isChecked():
                model = "Smart"
            elif self.radLuxury.isChecked():
                model = "Luxury"
            else:
                model = "Standard"
            
            # Now, create a new file in append mode to continually add items to it.
            # In addition, we want to now write the stored information in the variables (in str) on every new line
            with open ("home_purchases_made.txt", "a") as f:
                f.write(f"First Name: {f_name}   Last Name: {l_name}    Age: {str(age)}      Home Type: {house_selected}   Model Type: {model} \n")       
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print ("Closing any open DB connections in purchase")
    
    
    def display_data (self):
        try:
            # We want to establish that index depends on what tab index the user is on
            index = self.tabPurchase.currentIndex()
            
            # Based on the index number, we want to view the newly created text file in the previous
            # So we open it in read mode, as to not erase previous data
            if(index == 1):
                with open("home_purchases_made.txt", "r") as f:
                    for line in f:
                        # For each line, add that line into the list widget on the Purchases Made tab
                        self.listWidget.addItem(line)
            else:
                # However, if we are not on this tab index, we want to clear the list to prevent entry duplication
                self.listWidget.clear()
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print ("Closing any open DB connections in display_data")
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    homePurchase = QtWidgets.QMainWindow()
    ui = Ui_homePurchase()
    ui.setupUi(homePurchase)
    homePurchase.show()
    sys.exit(app.exec())
